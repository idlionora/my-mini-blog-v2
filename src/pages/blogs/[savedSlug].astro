---
export const prerender = true;
import BlogPage from "@components/BlogPage.astro"
import type { GetStaticPaths, MarkdownInstance } from "astro";
import "@styles/blogs.css"

export const getStaticPaths =(async () => {
	const allSavedPosts: MarkdownInstance<Record<string, any>>[] = await Astro.glob("@data/blogposts/*.md");
	const frontmatters = allSavedPosts.map((blogpost) => blogpost.frontmatter);
	
	return frontmatters.map((blog) => { return {
		params: {savedSlug: blog.slug},
		props: blog
	}})
}) satisfies GetStaticPaths;

const {id, title, summary, slug, blogpostImg, blogthumbImg, bannerImg, content, tags, createdAt, updatedAt, user, commentCount} = Astro.props;
---
<BlogPage {id} {title} {bannerImg} {content} {tags} {createdAt} {updatedAt} {user} />

<script>
	import fetchExploreCards from "@scripts/fetchExploreCards"

	const blogpostArticle = document.getElementById('blogpost-article')
	const currentBlogId = blogpostArticle?.dataset.blogid;
	const tagList = document.getElementById('tag-list')
	const tagString = tagList?.dataset.tags;
	const expCardContainer = document.getElementById('explore-card-container');
	const exploreFetchMesage = document.getElementById('explore-fetch-message');
	
	// fetchExploreCards({tagString, excludedId: currentBlogId, cardContainer: expCardContainer, fetchingMessage: exploreFetchMesage});
</script>
<script>
	import axios from 'axios';
	import CommentSection, {insertCommentTextarea, switchToTabNum, deleteComment} from '@scripts/commentCardFunctions';
	import commentCard, {type CommentCardInput} from '@scripts/commentCard';

	const blogpostArticle = document.getElementById('blogpost-article')
	const currentBlogId = blogpostArticle?.dataset.blogid;
	const currentUserImg= document.getElementById('comment-current-userimg');
	const currentUserName = document.getElementById('comment-current-username');
	const commentTextArea = document.getElementById('comment-textarea') as HTMLTextAreaElement;
	const commentCount = document.getElementById('comment-textarea-count');
	const commentButton = document.getElementById('comment-textarea-button');
	
	let commentJWT:string | undefined;
	let commentUserInfo:{id:string; name:string; photo:string} | undefined;

	function countCharacters(event : Event, numberDisplay: HTMLElement | null) {
		const target = event.target as HTMLTextAreaElement;
		if (target && numberDisplay) numberDisplay.innerText = (1000 - target.value.length).toString();
	}

	async function postComment(event: Event, blogId:string | undefined, message: string) {
		event.preventDefault();
		if (!blogId) return;

		let userJWT = localStorage.getItem('user_jwt');
		if (userJWT) userJWT = JSON.parse(userJWT).value;

		try {
			const headers = {'Authorization': `Bearer ${userJWT}`}
			await axios.post(`${import.meta.env.PUBLIC_APISITE}/blogposts/${blogId}/comments`, {
				comment: message, createdAt: Date.now()
			}, {headers});

		} catch(err) {
			console.log(err);
			alert('Failed to post your comment. Please try again later.')
		}
	}

	const setUserForComment = () => {
		// get token value and expiration date
		const userJWT = localStorage.getItem('user_jwt');
		if (!userJWT) {
			return;
		};
		const userJWTObj = JSON.parse(userJWT);
		const dateExp = Date.parse(userJWTObj.expires);

		// delete user's data from localStorage if expired
		if (Date.now() > dateExp) {
			localStorage.removeItem('user_jwt');
			localStorage.removeItem('user_info');
			return;
		};
		
		// get current user info
		const userInfo = localStorage.getItem('user_info');
		if (!userInfo) {
			localStorage.removeItem('user_jwt');
			return;
		};
		
		// set user's JWT token and info for comment
		commentJWT = userJWTObj.value;
		commentUserInfo = JSON.parse(userInfo);
	}

	const commentFormInit = () => {
		if (!commentJWT || !commentUserInfo?.id) {
			commentButton?.addEventListener('click', () => window.location.replace('/login'))
		}

		currentUserImg?.setAttribute('src', `${import.meta.env.PUBLIC_IMG_HOST}${commentUserInfo?.photo}`);
		currentUserName!.innerText = commentUserInfo!.name;
		currentUserName!.className = '';
		commentTextArea?.removeAttribute('disabled');
		commentTextArea?.addEventListener('input', (e) => countCharacters(e, commentCount));
		commentButton!.innerText = "Comment"
		commentButton?.addEventListener('click', (e) => postComment(e, currentBlogId, commentTextArea.value))
	};

	setUserForComment();
	commentFormInit()

	// COMMENT CARDS FUNCTIONS

	const commentContainer = document.getElementById('comment-container');
	const paginationContainer = document.getElementById('pagination-container');
	const loggedinUserId = commentUserInfo?.id || "00"

	const blogComments = new CommentSection(currentBlogId!,  paginationContainer!, commentContainer!, loggedinUserId);

	const paginationInit = async (tabJump: "first" | "last" = "first") => {
		await blogComments.buildPagination(tabJump);
		paginationContainer?.children[0].addEventListener('click', () => switchToTabNum(blogComments, blogComments.currentTab - 1));
		paginationContainer?.children[2].addEventListener('click', () => switchToTabNum(blogComments, blogComments.currentTab + 1));
		document.getElementById('pagination-first')?.addEventListener('click', () => switchToTabNum(blogComments, 1));
		document.getElementById('pagination-last')?.addEventListener('click', () => switchToTabNum(blogComments, blogComments.commentTabNum));
	}

	// paginationInit()

	//testingcard
	const testCommentData: CommentCardInput = {
		commentId: '655c7a2bd2ffdd11ea492d1c',
		commentUserName: 'Barry T. Quokka',
		commentUserPhoto: '/v1710613086/my-mini-blog/user/profile-655c7a2bd2ffdd11ea492d1c.jpg',
		commentDate: '2024-03-13T08:53:44.065+00:00',
		commentString: 'we asked the neighborhood housewives to prepare food for 2 meals and 4 times of snacks… we borrowed the scanner-printer from our local professor (who is actually our lil committee’s number one leader. Hush hush), and then! We bought individual name stamps that all in all had exhausted the office stationary budget already…',
		isLoggedIn: true
	}
	const commmentTabInsert = commentCard(testCommentData, 0)
	const testParsedComment = new DOMParser().parseFromString(commmentTabInsert, 'text/html').body;
	commentContainer!.innerHTML = testParsedComment.innerHTML;

	document.getElementById(`button-edit-0`)?.addEventListener('click', () => insertCommentTextarea(0, testCommentData.commentId));
	document.getElementById(`button-delete-0`)?.addEventListener('click', () => deleteComment(0, testCommentData.commentId))


</script>
