---
export const prerender = true;
import MainLayout from "@layouts/MainLayout.astro"
import type { GetStaticPaths, MarkdownInstance } from "astro";
import "@styles/blogs.css"

export const getStaticPaths =(async () => {
	const allSavedPosts: MarkdownInstance<Record<string, any>>[] = await Astro.glob("@data/blogposts/*.md");
	const frontmatters = allSavedPosts.map((blogpost) => blogpost.frontmatter);
	
	return frontmatters.map((blog) => { return {
		params: {savedSlug: blog.slug},
		props: blog
	}})
}) satisfies GetStaticPaths;

const {id: blogId, title, summary, slug, blogpostImg, blogthumbImg, bannerImg, content, tags, createdAt : createdString, updatedAt: updatedString, user, commentCount} = Astro.props;
const {_id: userId, name: userName, photo: userPhoto} = user;
let createdAt: Date = new Date(createdString);
const dateOptions: Intl.DateTimeFormatOptions = {
	day: 'numeric',
	month: 'long',
	year: 'numeric',
	timeZone: 'Asia/Jakarta'
}
const createdAtShort = new Intl.DateTimeFormat('en-US', {timeZone: 'Asia/Jakarta'}).format(createdAt);
const createdAtLong = new Intl.DateTimeFormat('en-US', dateOptions).format(createdAt);
let updatedAt: Date | string = new Date(updatedString);
updatedAt = new Intl.DateTimeFormat('en-US').format(updatedAt);

---

<MainLayout title={title}>
	<main class="w-full flex flex-col items-center">
		<section class="w-full max-w-[82.5rem] bg-neutral-100 h-40 sm:h-48 md:h-52 lg:h-56">
			<img src={`${import.meta.env.PUBLIC_IMG_HOST}${bannerImg}`} alt="Banner Image" class={`w-full h-full object-cover object-center ${bannerImg.includes('default') ? 'border-[2px] border-gray-300': ''}`}>	
		</section>
		<div class="blogpost-grid-container w-full max-w-[82.5rem] mb-7">
			<section class="blogpost-grid-main px-4 sm:px-5 lg:pr-7">
				<div class="flex w-full justify-between min-[400px]:justify-start mt-3 mb-2 md:px-3 md:mt-4 lg:px-4 gap-4 sm:gap-5">
					<div class="flex items-center">
						<div class="userimg-container userimg-sm mr-2 sm:mr-1">
							<img src={`${import.meta.env.PUBLIC_IMG_HOST}${userPhoto}`} alt={`${userName.split(" ")[0]}'s photo'`} class="user-photo">
						</div>
						<p>{userName}</p>
					</div>
					<div class="flex flex-col min-[350px]:flex-row items-center gap-x-4">
						<div class="flex items-center">
							<img src="/icons/calendar.svg" alt="Created at" class="h-4 w-fit mr-1 opacity-95">
							<p class="min-[350px]:hidden">{createdAtShort}</p>
							<p class="hidden min-[350px]:block">{createdString === updatedString ? createdAtLong : createdAtShort}</p>
						</div>
						{createdString !== updatedString ? <div class="flex items-center"><img src="/icons/calendar-plus.svg" alt="Updated at" class="h-4 w-fit mr-1 opacity-95" /><p>{updatedAt}</p></div>:<></>}
					</div>
				</div>
				<article id="blogpost-article" class="w-full md:pl-3 lg:pl-4 pb-4" data-blogid={blogId}>
					<h1 class="font-heading font-bold text-2xl mb-6" set:html={title} />
					<p set:html={content} />
					<div id="tag-list" class="mt-8" data-tags={tags.map((tag:string) => `${tag},`).join('').replace(/,$/, "")}>
						{tags.map((tag:string) => <a href={`/tags/${tag}`} class="mr-2 card-link text-blue-700">{`#${tag}`}</a>)}
					</div>
				</article>
			</section>
			<section class="blogpost-grid-comment w-full px-4 sm:px-5 flex flex-col items-center">
				<div class="w-full max-w-2xl bg-theme-blue relative translate-x-[1px] drop-shadow-[7px_7px_0_#4267b2] py-3 px-3.5">
					<div class="flex items-center">
						<div class="userimg-container userimg-md mr-2 ml-0.5">
							<img id="comment-userimg" src="/images/noun-user-1256674-profile.jpg" alt="User's photo" class="userimg-photo">
						</div>
						<p id="comment-username" class="font-semibold text-white text-base tracking-wide font-heading">Guest</p>
					</div>
					<form>
						<textarea name="comment-textarea" id="comment-textarea" rows="5" placeholder="What's on your mind?" disabled={true} class="w-full rounded-lg py-2 px-3 text-base tracking-wide mt-2 outline-[#1e40af]"/>
						<div class="w-full flex justify-between">
							<p><span id="comment-textarea-count">1000</span> characters left</p>
							<button id="comment-textarea-button" class="bg-[#4267b2] hover:bg-[#dbb632] text-white px-3.5 py-2 rounded-lg">Log in to Comment</button>
						</div>
					</form>
				</div>
				<div class="w-full max-w-2xl relative mt-10">
					<h2 class="font-heading text-lg font-bold tracking-wider">Comments</h2>
					<div class="w-full h-[0.2rem] bg-theme-purple mb-3"/>
					<div class="absolute top-0 right-0 flex"></div>
				</div>
			</section>
			<section class="blogpost-grid-sidebar px-4 sm:px-5 md:pl-0 relative">
				<h2 class="font-heading text-lg font-bold tracking-wider mt-5">Explore Other Post</h2>
				<div class="w-full h-[0.2rem] bg-theme-purple mb-3"/>
				<div id="explore-card-container" class="w-full grid sm:grid-cols-2 md:grid-cols-1 gap-2 justify-items-center">
					<div id="explore-fetch-message" class="absolute hidden flex-col items-center w-full px-4 sm:px-2.5">
						<img src="/images/noun-download-6640669.png" alt="Downloading from Database" class="mt-4 px-1 w-14 filter-green-500"><p class="text-green-500 mt-3 w-full text-center text-lg mb-8">Fetching data, please&nbsp;wait...</p>
					</div>
				</div>
			</section>
		</div>
	</main>
</MainLayout>

<script>
	import fetchExploreCards from "@scripts/fetchExploreCards"

	const blogpostArticle = document.getElementById('blogpost-article')
	const currentBlogId = blogpostArticle?.dataset.blogid;
	const tagList = document.getElementById('tag-list')
	const tagString = tagList?.dataset.tags;
	const expCardContainer = document.getElementById('explore-card-container');
	const exploreFetchMesage = document.getElementById('explore-fetch-message');
	
	// fetchExploreCards({tagString, excludedId: currentBlogId, cardContainer: expCardContainer, fetchingMessage: exploreFetchMesage});
	

</script>
