---
export const prerender = true;
import MainLayout from "@layouts/MainLayout.astro"
import type { GetStaticPaths, MarkdownInstance } from "astro";
import "@styles/exploreCard.css"

export const getStaticPaths =(async () => {
	const allSavedPosts: MarkdownInstance<Record<string, any>>[] = await Astro.glob("@data/blogposts/*.md");
	const frontmatters = allSavedPosts.map((blogpost) => blogpost.frontmatter);
	
	return frontmatters.map((blog) => { return {
		params: {savedSlug: blog.slug},
		props: blog
	}})
}) satisfies GetStaticPaths;

const {id: blogId, title, summary, slug, blogpostImg, blogthumbImg, bannerImg, content, tags, createdAt : createdString, updatedAt: updatedString, user, commentCount} = Astro.props;
const {_id: userId, name: userName, photo: userPhoto} = user;
let createdAt: Date = new Date(createdString);
const dateOptions: Intl.DateTimeFormatOptions = {
	day: 'numeric',
	month: 'long',
	year: 'numeric',
}
const createdAtShort = new Intl.DateTimeFormat('id').format(createdAt);
const createdAtLong = new Intl.DateTimeFormat('id', dateOptions).format(createdAt);
let updatedAt: Date | string = new Date(updatedString);
updatedAt = new Intl.DateTimeFormat('id').format(updatedAt);

---

<MainLayout title={title}>
	<main class="w-full flex flex-col items-center">
		<section class="w-full max-w-[82.5rem] bg-neutral-100 h-40 sm:h-48 md:h-52 lg:h-56">
			<img src={`${import.meta.env.PUBLIC_IMG_HOST}${bannerImg}`} alt="Banner Image" class={`w-full h-full object-cover object-center ${bannerImg.includes('default') ? 'border-[2px] border-gray-300': ''}`}>	
		</section>
		<div class="w-full max-w-[82.5rem] grid grid-cols-12 mb-7">
			<section class="col-span-full md:col-span-8 lg:col-span-9 px-4 sm:px-5 lg:pr-7">
				<div class="flex w-full justify-between min-[400px]:justify-start mt-3 mb-2 md:px-3 md:mt-4 lg:px-4 gap-4 sm:gap-5">
					<div class="flex items-center">
						<div class="w-9 h-9 bg-white rounded-full shrink-0 overflow-hidden flex justify-center items-center mr-2 sm:mr-1">
							<img src={`${import.meta.env.PUBLIC_IMG_HOST}${userPhoto}`} alt={`${userName.split(" ")[0]}'s photo'`} class="w-10 h-10 object-cover object-center">
						</div>
						<p>{userName}</p>
					</div>
					<div class="flex flex-col min-[350px]:flex-row items-center gap-x-4">
						<div class="flex items-center">
							<img src="/icons/calendar.svg" alt="Created at" class="h-4 w-fit mr-1 opacity-95">
							<p class="min-[350px]:hidden">{createdAtShort}</p>
							<p class="hidden min-[350px]:block">{createdString === updatedString ? createdAtLong : createdAtShort}</p>
						</div>
						{createdString !== updatedString ? <div class="flex items-center"><img src="/icons/calendar-plus.svg" alt="Updated at" class="h-4 w-fit mr-1 opacity-95" /><p>{updatedAt}</p></div>:<></>}
					</div>
				</div>
				<article id="blogpost-article" class="w-full md:pl-3 lg:pl-4 pb-14" data-blogid={blogId}>
					<h1 class="font-heading font-bold text-2xl mb-6" set:html={title} />
					<p set:html={content} />
					<div id="tag-list" class="mt-8" data-tags={tags.map((tag:string) => `${tag},`).join('').replace(/,$/, "")}>
						{tags.map((tag:string) => <a href={`/tags/${tag}`} class="mr-2 card-link text-blue-700">{`#${tag}`}</a>)}
					</div>
				</article>
			</section>
			<section class="col-span-full md:col-span-4 lg:col-span-3 px-4 sm:px-5 md:pl-0 relative">
				<h2 class="font-heading text-lg font-bold tracking-wider mt-5">Explore Other Post</h2>
				<div class="w-full h-[0.2rem] bg-theme-purple mb-3"/>
				<div id="explore-card-container" class="w-full grid sm:grid-cols-2 md:grid-cols-1 gap-2 justify-items-center">
					<div id="explore-fetch-message" class="absolute hidden flex-col items-center w-full px-4 sm:px-2.5">
						<img src="/images/noun-download-6640669.png" alt="Downloading from Database" class="mt-4 px-1 w-14 filter-green-500"><p class="text-green-500 mt-3 w-full text-center text-lg mb-8">Fetching data, please&nbsp;wait...</p>
					</div>
				</div>
			</section>
		</div>
	</main>
</MainLayout>

<script>
	import axios from "axios";
	import exploreCard, {type ExploreCardData} from "@scripts/exploreCard";
	import shuffleArray from "@scripts/shuffleArray"

	const blogpostArticle = document.getElementById('blogpost-article')
	const blogId = blogpostArticle?.dataset.blogid;
	const tagList = document.getElementById('tag-list')
	const tagString = tagList?.dataset.tags;
	const expCardContainer = document.getElementById('explore-card-container');
	const exploreFetchMessage = document.getElementById('explore-fetch-message');

	async function mapExploreCards(idArr:string[]) {
		const res2 = (await axios.get(`${import.meta.env.PUBLIC_APISITE}/blogposts/?fields=title,blogthumbImg,content,slug&_id=${idArr.join()}`));
		const cardsData = res2.data.data;
		const cardsInsert = cardsData.map((cardData: ExploreCardData, index: number) => {return exploreCard({cardData, index})});
		const parserdCards = new DOMParser().parseFromString(cardsInsert.join(''), 'text/html').body;

		if (expCardContainer) {
			expCardContainer.innerHTML = parserdCards.innerHTML;
		}
	}

	async function fetchExploreCards() {
		try {
			exploreFetchMessage!.className = 'absolute flex flex-col items-center w-full px-4 sm:px-2.5'
			
			if (!tagString) {
				exploreFetchMessage!.innerText = 'No related post available.'
				return
			}

			const res = (await axios.get(`${import.meta.env.PUBLIC_APISITE}/tags/?tag=${tagString}`));
			const resData = res.data.data
			let blogpostIds = resData.map((tagData: {_id: string, tag: string, blogposts: string[]}) => tagData.blogposts).flat()
			blogpostIds = blogpostIds.filter((value:string, index:number, array:string[]) => array.indexOf(value) === index)
			blogpostIds.splice(blogpostIds.indexOf(blogId), 1);

			if (blogpostIds.length < 1) {
				exploreFetchMessage!.innerText = 'No related post available.'
				return
			} else if (blogpostIds.length < 6) {
				await mapExploreCards(blogpostIds);
				return
			}

			const shuffledIds = shuffleArray<string>(blogpostIds);
			await mapExploreCards(shuffledIds);
		} catch(err) {
			console.log(err)
			exploreFetchMessage!.innerText = 'Related post is unable to load'
		}
	}

	fetchExploreCards()

	

</script>
